/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ponta;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.JOptionPane;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author ahmad.d
 */
public class dataPonta extends javax.swing.JFrame {
    private static Connection connection;      
    PreparedStatement pst = null;
    String folder_xls = "xls";
    String folder_txt = "txt";
    /**
     * Creates new form dataPonta
     */
    public dataPonta() {
        setLocationRelativeTo(null);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        proses = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lokasi = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textArea1 = new java.awt.TextArea();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ponta Apps Ver 1.5(Daytrans, Lawson,Cobrand) Export txt dan excel");

        proses.setText("Proses");
        proses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prosesActionPerformed(evt);
            }
        });

        jLabel7.setText("SAVE");

        jLabel4.setText("MASUKAN PATH FILE YANG AKAN DI LOAD");

        textArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textArea1.setEditable(false);

        jLabel8.setText("Status");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(proses))
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(13, 13, 13)
                                .addComponent(lokasi))))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel4)
                        .addGap(0, 243, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lokasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(proses)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(2, 2, 2)))
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prosesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prosesActionPerformed
        // TODO add your handling code here:
       if(lokasi.getText().equals("")){
          JOptionPane.showMessageDialog(null, "No File Choiced !", "Error", JOptionPane.ERROR_MESSAGE);
      }else
        try {
            textArea1.append("Processing..."+"\n");
            bikinFolder();
            textArea1.append("Finished"+"\n");
       } catch (IOException ex) {
           Logger.getLogger(dataPonta.class.getName()).log(Level.SEVERE, null, ex);
           textArea1.append(ex+"\n");
       } catch (SQLException ex) {
           Logger.getLogger(dataPonta.class.getName()).log(Level.SEVERE, null, ex);
           textArea1.append(ex+"\n");
       }
    }//GEN-LAST:event_prosesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dataPonta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dataPonta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dataPonta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dataPonta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dataPonta().setVisible(true);
            }
        });
    }
    private void bikinFolder() throws IOException, SQLException{
        String LOKASI = validatePath(lokasi.getText()+"\\");
        File srcFolder = new File(LOKASI);
        if(!srcFolder.exists()){

           System.out.println("Directory does not exist.");
           textArea1.append("Directory does not exist."+"\n");
           //just exit
           return;

        }else{
        prosesData(srcFolder);
        }
        
    }
    
     private void prosesData(File src) 
        throws IOException, SQLException{ //To change body of generated methods, choose Tools | Templates.
        if(src.isDirectory()){
    		
    		//list all the directory contents
    		String files[] = src.list();
    		int x = 0;
    		for (String file : files) {
    		   //construct the src and dest file structure
    		   File srcFile = new File(src, file);
    		   //File destFile = new File(dest, file);
    		   //recursive copy
    		   prosesData(srcFile);
                    if (x>0) {
                        textArea1.append("\n");
                        textArea1.append("\n");
                    }
                    x++;
    		}
        }else{
                textArea1.append("\n");
                textArea1.append("\n");
                System.out.println(" ");
                System.out.println(" ");
                String LOKASI = validatePath(lokasi.getText()+"\\");
                File srcFolder = new File(LOKASI);
                //System.out.println(src);
                String Filename = src.getName();
                textArea1.append("Process file : "+Filename+" ..."+"\n");
                String patch = src.getPath();
                InputStream ExcelFileToRead = new FileInputStream(patch);
                XSSFWorkbook  wb = new XSSFWorkbook(ExcelFileToRead);
		XSSFWorkbook test = new XSSFWorkbook(); 
		
		XSSFSheet sheet = wb.getSheetAt(0);
		XSSFRow row; 
		XSSFCell cell;
                int countofrow = sheet.getLastRowNum();
                int total_data = countofrow + 1;
                int barisExcel = 0;
                textArea1.append("Total Data is : "+total_data+"\n");
                if (total_data > 110000) {
                textArea1.append("Total Data is Over : "+"\n");
                return;
                }
                
                textArea1.append("Process Read File : "+Filename+" ..."+"\n");
                textArea1.append("Process Export : "+Filename+" ..."+"\n");
                int Splitbagi = 5000;
                int split = total_data/Splitbagi;
                int split2 = total_data%Splitbagi;
                if (split2 > 0) {
                    split++;
                }
                
                int dataSplit;
                //make folder per perso and filename
                boolean folderPERSO = (new File(LOKASI+"PERSO"+"\\"+"txt\\"+Filename)).mkdirs();
                String directoryPerso = LOKASI+"PERSO"+"\\"+"txt\\"+Filename+"\\";
                
                //make folder per perso and filename
                boolean folderPERSO2 = (new File(LOKASI+"PERSO"+"\\"+"excel\\"+Filename)).mkdirs();
                String directoryPerso2 = LOKASI+"PERSO"+"\\"+"excel\\"+Filename+"\\";
                
                //make folder per Label and filename
                boolean folderLABEL = (new File(LOKASI+"LABEL"+"\\"+Filename)).mkdirs();
                String directoryLABEL = LOKASI+"LABEL"+"\\"+Filename+"\\";
                for (int j = 1; j < split + 1; j++) {
                    dataSplit = 1;
                    System.out.println(j);
                    // make Header Excel
                    XSSFWorkbook perso=new XSSFWorkbook();
                    XSSFSheet sheetperso=perso.createSheet("Result");
                    XSSFRow rowMAILING0ID =   sheetperso.createRow((short)0);
                    rowMAILING0ID.createCell((short) 0).setCellValue("No_kartu");
                    rowMAILING0ID.createCell((short) 1).setCellValue("Barcode");
                    rowMAILING0ID.createCell((short) 2).setCellValue("Encode");
                    
                    XSSFWorkbook label=new XSSFWorkbook();
                    XSSFSheet sheetlabel=label.createSheet("Result");
                    XSSFRow rowlabel =   sheetlabel.createRow((short)0);
                    rowlabel.createCell((short) 0).setCellValue("No_kartu");
                    rowlabel.createCell((short) 1).setCellValue("Barcode");
                    
                    if ((split2 > 0) && (j == split) ) {
                        Splitbagi = split2;    
                    }
                        for (int i = 0; i < Splitbagi; i++) {
                            System.out.println(j+"_"+i);
                            Row baris = sheet.getRow(barisExcel);
                            Cell isi = baris.getCell(0);
                            if (isi == null || isi.getCellType() == Cell.CELL_TYPE_BLANK) {
                                // Can't be this cell - it's empty
                                continue;
                            }
                            String nokartu_m = isi.getStringCellValue();
                            if (!nokartu_m.substring(17, 18).equals(" ")) {
                                JOptionPane.showMessageDialog(null, "Length NoKartu is over");
                                break;
                            }
                            String nokartu_p = nokartu_m.substring(0, 4) + " " + nokartu_m.substring(4, 8) + " " + nokartu_m.substring(8, 12) + " " + nokartu_m.substring(12, 16);
                            String barcode = nokartu_m.substring(0, 16);
                            String encode = nokartu_m.substring(0, 16);
                            String nospace = nokartu_m.replace(" ", "");
                            String encodeTrack_m = nospace.substring(16, (nospace.length() - 1));
                            /* Save Data to Database */
                            //insertdata(nokartu_m,nokartu_p,barcode,encode,encodeTrack_m,Filename);
                            
                            exportToexcel(nokartu_p,barcode,encode,dataSplit,sheetperso,sheetlabel,rowMAILING0ID,rowlabel);
                            dataSplit++;
                            barisExcel++;
                        }
                        textArea1.append("Creating File excel..."+"\n");
                        FileOutputStream fileOut ;
                        fileOut = new FileOutputStream(directoryPerso2+"perso"+Filename+"_"+j+".xlsx");
                        perso.write(fileOut);
                        fileOut.close();
                        textArea1.append("Export File Perso : "+Filename+"_"+j+" Done"+"\n"); 
                        
                        FileOutputStream fileOut2 ;
                        fileOut2 = new FileOutputStream(directoryLABEL+"label"+Filename+"_"+j+".xlsx");
                        label.write(fileOut2);
                        fileOut2.close();
                        textArea1.append("Export File Label : "+Filename+"_"+j+" Done"+"\n");
                        System.out.println("write3");
                }
                
                /* create File Perso txt split per 10 rb */
                    int SplitbagiPerso = 10000;
                    int splitPerso = total_data/SplitbagiPerso;
                    int split2Perso = total_data%SplitbagiPerso;
                    if (split2Perso > 0) {
                        splitPerso++;
                    }
                    int dataSplit2;
                    int barisExcel2 = 0;
                    
                    textArea1.append("Creating File Perso txt..."+"\n");
                    for (int k = 1; k < splitPerso + 1; k++) {
                        dataSplit = 1;
                        FileWriter outFile;
                        File dstFile = new File(directoryPerso+"perso"+Filename+"_"+k+".txt");
                        outFile = new FileWriter(dstFile.getPath());
                        PrintWriter writer = new PrintWriter(outFile);
                        
                        if ((split2Perso > 0) && (k == splitPerso) ) {
                            SplitbagiPerso = split2Perso;    
                        }
                            for (int i = 0; i < SplitbagiPerso; i++) {
                                    Row baris = sheet.getRow(barisExcel2);
                                    Cell isi = baris.getCell(0);
                                    if (isi == null || isi.getCellType() == Cell.CELL_TYPE_BLANK) {
                                        // Can't be this cell - it's empty
                                        continue;
                                    }
                                    String nokartu_m = isi.getStringCellValue();
                                    if (!nokartu_m.substring(17, 18).equals(" ")) {
                                        JOptionPane.showMessageDialog(null, "Length NoKartu is over");
                                        break;
                                    }
                                    String nokartu_p = nokartu_m.substring(0, 4) + " " + nokartu_m.substring(4, 8) + " " + nokartu_m.substring(8, 12) + " " + nokartu_m.substring(12, 16);
                                    String barcode = nokartu_m.substring(0, 16);
                                    String encode = nokartu_m.substring(0, 16);
                                    String nospace = nokartu_m.replace(" ", "");
                                    String encodeTrack_m = nospace.substring(16, (nospace.length() - 1));
                                    writer.println(nokartu_p+","+barcode+","+encode);
                                    dataSplit++;
                                    barisExcel2++;
                            }
                            writer.close();
                        textArea1.append("Export File Perso : "+Filename+"_"+k+" Done"+"\n");    
                    }
    	}
    }
     
    private void insertdata(String nokartu_m, String nokartu_p, String barcode, String encode, String encodeTrack_m,String Filename) throws IOException, SQLException{
        connection = (Connection) KoneksiMySQL.getConnection();
        String SQL =("insert into data (`nokartuawal`,`nokartucetak`,`barcode`,`enc_track2`,`enc_track2_m`,`file_name`,`order_dt`) "
                   + " values (?,?,?,?,?,?,NOW())");
        pst = (PreparedStatement) connection.prepareStatement(SQL);
        pst.setString(1,nokartu_m.trim());     
        pst.setString(2,nokartu_p.trim());
        pst.setString(3,barcode.trim());
        pst.setString(4,encode.trim());
        pst.setString(5,encodeTrack_m.trim());
        pst.setString(6,Filename.trim());
        pst.executeUpdate();
        pst.close();
    }
    
    private void exportToexcel(String nokartu_p, String barcode, String encode,int baris,XSSFSheet sheetperso,XSSFSheet sheetlabel,XSSFRow rowMAILING0ID,XSSFRow rowlabel) throws FileNotFoundException, IOException{
        rowMAILING0ID =   sheetperso.createRow((short)baris);
        rowMAILING0ID.createCell((short) 0).setCellValue(nokartu_p);
        rowMAILING0ID.createCell((short) 1).setCellValue(barcode);
        rowMAILING0ID.createCell((short) 2).setCellValue(encode);
        
        rowlabel =   sheetlabel.createRow((short)baris);
        rowlabel.createCell((short) 0).setCellValue(nokartu_p);
        rowlabel.createCell((short) 1).setCellValue(barcode);
    }
    

    private String validatePath(String invalidPath){
        String validPath;
        validPath = invalidPath.replace('\\', '/');
        return validPath;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField lokasi;
    private java.awt.Panel panel1;
    private javax.swing.JButton proses;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
   
}
